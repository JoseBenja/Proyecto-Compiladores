
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package umg.compiladores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\010\000\002\002" +
    "\011\000\002\007\017\000\002\007\020\000\002\007\016" +
    "\000\002\007\017\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\005\000\002\014\004\000\002\014\006\000\002\014\005" +
    "\000\002\006\004\000\002\004\010\000\002\004\011\000" +
    "\002\004\012\000\002\010\004\000\002\010\012\000\002" +
    "\010\004\000\002\010\006\000\002\010\007\000\002\010" +
    "\006\000\002\010\010\000\002\010\011\000\002\010\006" +
    "\000\002\010\006\000\002\010\006\000\002\010\006\000" +
    "\002\010\012\000\002\010\011\000\002\010\013\000\002" +
    "\010\024\000\002\010\011\000\002\010\004\000\002\010" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\005\013\000\002\003\003\000" +
    "\002\003\003\000\002\016\005\000\002\023\006\000\002" +
    "\023\013\000\002\023\002\000\002\024\011\000\002\024" +
    "\007\000\002\024\002\000\002\021\006\000\002\021\006" +
    "\000\002\021\006\000\002\021\006\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\004\000\002\020" +
    "\004\000\002\020\002\000\002\015\003\000\002\015\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\006\103\004\104\005\001\002\000\030\027" +
    "\uffb5\051\uffb5\055\uffb5\060\uffb5\062\uffb5\064\uffb5\065\uffb5" +
    "\067\uffb5\073\uffb5\107\uffb5\112\uffb5\001\002\000\030\027" +
    "\uffb6\051\uffb6\055\uffb6\060\uffb6\062\uffb6\064\uffb6\065\uffb6" +
    "\067\uffb6\073\uffb6\107\uffb6\112\uffb6\001\002\000\004\062" +
    "\011\001\002\000\004\002\010\001\002\000\004\002\001" +
    "\001\002\000\004\112\012\001\002\000\004\034\013\001" +
    "\002\000\050\004\022\013\034\027\024\044\040\045\023" +
    "\050\026\051\035\055\014\060\042\064\020\065\030\066" +
    "\036\067\021\071\033\072\037\073\032\103\004\104\005" +
    "\112\031\001\002\000\006\030\ufff8\112\ufff8\001\002\000" +
    "\044\004\022\013\034\027\024\044\040\045\023\050\026" +
    "\051\035\055\014\060\042\064\020\065\030\066\036\067" +
    "\021\071\033\072\037\073\032\112\031\001\002\000\004" +
    "\035\342\001\002\000\046\004\022\013\034\025\321\027" +
    "\024\044\040\045\023\050\026\051\035\055\014\060\042" +
    "\064\020\065\030\066\036\067\021\071\033\072\037\073" +
    "\032\112\031\001\002\000\006\030\ufff7\112\ufff7\001\002" +
    "\000\006\030\ufff6\112\ufff6\001\002\000\004\006\307\001" +
    "\002\000\004\011\264\001\002\000\006\030\ufffa\112\ufffa" +
    "\001\002\000\004\107\222\001\002\000\004\011\201\001" +
    "\002\000\006\030\175\112\174\001\002\000\006\030\ufff5" +
    "\112\ufff5\001\002\000\006\020\143\025\144\001\002\000" +
    "\006\030\ufff4\112\ufff4\001\002\000\004\011\121\001\002" +
    "\000\056\004\022\013\034\027\024\035\uffd8\044\040\045" +
    "\023\050\026\051\035\055\014\060\042\061\uffd8\064\020" +
    "\065\030\066\036\067\021\070\uffd8\071\033\072\037\073" +
    "\032\103\uffd8\104\uffd8\112\031\001\002\000\006\030\ufff9" +
    "\112\ufff9\001\002\000\004\011\112\001\002\000\004\112" +
    "\103\001\002\000\004\034\045\001\002\000\006\103\004" +
    "\104\005\001\002\000\006\030\ufff3\112\ufff3\001\002\000" +
    "\004\035\044\001\002\000\004\002\uffff\001\002\000\044" +
    "\004\022\013\034\027\024\044\040\045\023\050\026\051" +
    "\035\055\014\060\042\064\020\065\030\066\036\067\021" +
    "\071\033\072\037\073\032\112\031\001\002\000\004\035" +
    "\047\001\002\000\004\066\050\001\002\000\004\011\051" +
    "\001\002\000\006\111\054\112\053\001\002\000\004\012" +
    "\101\001\002\000\016\024\057\026\061\036\056\041\062" +
    "\042\055\043\063\001\002\000\016\024\057\026\061\036" +
    "\056\041\062\042\055\043\063\001\002\000\006\111\uffc0" +
    "\112\uffc0\001\002\000\006\111\uffc1\112\uffc1\001\002\000" +
    "\006\111\uffc3\112\uffc3\001\002\000\006\111\065\112\064" +
    "\001\002\000\006\111\uffc5\112\uffc5\001\002\000\006\111" +
    "\uffc2\112\uffc2\001\002\000\006\111\uffc4\112\uffc4\001\002" +
    "\000\010\012\uffbd\040\066\047\070\001\002\000\010\012" +
    "\uffbd\040\066\047\070\001\002\000\006\111\054\112\053" +
    "\001\002\000\004\012\uffc7\001\002\000\006\111\054\112" +
    "\053\001\002\000\004\012\uffbe\001\002\000\004\012\uffbf" +
    "\001\002\000\004\012\uffc6\001\002\000\006\111\076\112" +
    "\075\001\002\000\010\012\uffbd\040\066\047\070\001\002" +
    "\000\010\012\uffbd\040\066\047\070\001\002\000\004\012" +
    "\uffc8\001\002\000\004\012\uffc9\001\002\000\004\013\102" +
    "\001\002\000\014\035\uffdc\061\uffdc\070\uffdc\103\uffdc\104" +
    "\uffdc\001\002\000\004\025\104\001\002\000\004\052\105" +
    "\001\002\000\004\072\106\001\002\000\004\011\107\001" +
    "\002\000\004\012\110\001\002\000\044\004\022\013\034" +
    "\027\024\044\040\045\023\050\026\051\035\055\014\060" +
    "\042\064\020\065\030\066\036\067\021\071\033\072\037" +
    "\073\032\112\031\001\002\000\014\035\uffe9\061\uffe9\070" +
    "\uffe9\103\uffe9\104\uffe9\001\002\000\006\111\054\112\053" +
    "\001\002\000\004\012\114\001\002\000\004\034\115\001" +
    "\002\000\044\004\022\013\034\027\024\044\040\045\023" +
    "\050\026\051\035\055\014\060\042\064\020\065\030\066" +
    "\036\067\021\071\033\072\037\073\032\112\031\001\002" +
    "\000\004\035\117\001\002\000\014\035\uffdd\061\uffdd\070" +
    "\uffdd\103\uffdd\104\uffdd\001\002\000\014\035\uffd9\061\uffd9" +
    "\070\uffd9\103\uffd9\104\uffd9\001\002\000\004\112\122\001" +
    "\002\000\004\012\123\001\002\000\004\034\124\001\002" +
    "\000\010\035\uffca\053\126\110\127\001\002\000\004\035" +
    "\142\001\002\000\004\111\134\001\002\000\004\023\130" +
    "\001\002\000\044\004\022\013\034\027\024\044\040\045" +
    "\023\050\026\051\035\055\014\060\042\064\020\065\030" +
    "\066\036\067\021\071\033\072\037\073\032\112\031\001" +
    "\002\000\004\061\132\001\002\000\004\013\133\001\002" +
    "\000\004\035\uffcb\001\002\000\004\023\135\001\002\000" +
    "\044\004\022\013\034\027\024\044\040\045\023\050\026" +
    "\051\035\055\014\060\042\064\020\065\030\066\036\067" +
    "\021\071\033\072\037\073\032\112\031\001\002\000\004" +
    "\061\137\001\002\000\004\013\140\001\002\000\010\035" +
    "\uffca\053\126\110\127\001\002\000\004\035\uffcc\001\002" +
    "\000\014\035\uffda\061\uffda\070\uffda\103\uffda\104\uffda\001" +
    "\002\000\024\027\024\051\035\055\014\060\042\064\020" +
    "\065\030\067\021\073\032\112\173\001\002\000\012\057" +
    "\147\063\150\111\151\112\146\001\002\000\004\013\171" +
    "\001\002\000\056\004\022\013\034\016\161\017\164\021" +
    "\156\022\155\027\024\032\157\044\040\045\023\050\026" +
    "\051\035\055\014\060\042\064\020\065\030\066\036\067" +
    "\021\071\033\072\037\073\032\112\031\001\002\000\004" +
    "\013\uffbc\001\002\000\004\013\uffbb\001\002\000\014\016" +
    "\161\017\160\021\156\022\155\032\157\001\002\000\044" +
    "\004\022\013\034\027\024\044\040\045\023\050\026\051" +
    "\035\055\014\060\042\064\020\065\030\066\036\067\021" +
    "\071\033\072\037\073\032\112\031\001\002\000\014\035" +
    "\uffe0\061\uffe0\070\uffe0\103\uffe0\104\uffe0\001\002\000\004" +
    "\111\163\001\002\000\006\111\uffb8\112\uffb8\001\002\000" +
    "\006\111\uffba\112\uffba\001\002\000\006\111\uffb7\112\uffb7" +
    "\001\002\000\004\111\162\001\002\000\006\111\uffb9\112" +
    "\uffb9\001\002\000\044\004\uffd6\013\uffd6\027\uffd6\044\uffd6" +
    "\045\uffd6\050\uffd6\051\uffd6\055\uffd6\060\uffd6\064\uffd6\065" +
    "\uffd6\066\uffd6\067\uffd6\071\uffd6\072\uffd6\073\uffd6\112\uffd6" +
    "\001\002\000\044\004\uffd7\013\uffd7\027\uffd7\044\uffd7\045" +
    "\uffd7\050\uffd7\051\uffd7\055\uffd7\060\uffd7\064\uffd7\065\uffd7" +
    "\066\uffd7\067\uffd7\071\uffd7\072\uffd7\073\uffd7\112\uffd7\001" +
    "\002\000\004\112\170\001\002\000\004\112\167\001\002" +
    "\000\014\035\uffe1\061\uffe1\070\uffe1\103\uffe1\104\uffe1\001" +
    "\002\000\044\004\uffd4\013\uffd4\027\uffd4\044\uffd4\045\uffd4" +
    "\050\uffd4\051\uffd4\055\uffd4\060\uffd4\064\uffd4\065\uffd4\066" +
    "\uffd4\067\uffd4\071\uffd4\072\uffd4\073\uffd4\112\uffd4\001\002" +
    "\000\044\004\uffd5\013\uffd5\027\uffd5\044\uffd5\045\uffd5\050" +
    "\uffd5\051\uffd5\055\uffd5\060\uffd5\064\uffd5\065\uffd5\066\uffd5" +
    "\067\uffd5\071\uffd5\072\uffd5\073\uffd5\112\uffd5\001\002\000" +
    "\014\035\uffdf\061\uffdf\070\uffdf\103\uffdf\104\uffdf\001\002" +
    "\000\052\004\uffef\011\uffef\012\uffef\013\uffef\025\uffef\027" +
    "\uffef\044\uffef\045\uffef\050\uffef\051\uffef\055\uffef\060\uffef" +
    "\064\uffef\065\uffef\066\uffef\067\uffef\071\uffef\072\uffef\073" +
    "\uffef\112\uffef\001\002\000\004\020\143\001\002\000\054" +
    "\004\ufff1\011\ufff1\012\ufff1\013\ufff1\020\177\025\ufff1\027" +
    "\ufff1\044\ufff1\045\ufff1\050\ufff1\051\ufff1\055\ufff1\060\ufff1" +
    "\064\ufff1\065\ufff1\066\ufff1\067\ufff1\071\ufff1\072\ufff1\073" +
    "\ufff1\112\ufff1\001\002\000\004\031\176\001\002\000\006" +
    "\030\ufff2\112\ufff2\001\002\000\024\027\024\051\035\055" +
    "\014\060\042\064\020\065\030\067\021\073\032\112\173" +
    "\001\002\000\052\004\ufff0\011\ufff0\012\ufff0\013\ufff0\025" +
    "\ufff0\027\ufff0\044\ufff0\045\ufff0\050\ufff0\051\ufff0\055\ufff0" +
    "\060\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\071\ufff0\072" +
    "\ufff0\073\ufff0\112\ufff0\001\002\000\004\051\202\001\002" +
    "\000\004\112\203\001\002\000\004\025\204\001\002\000" +
    "\004\111\205\001\002\000\004\013\206\001\002\000\004" +
    "\112\207\001\002\000\016\024\057\026\061\036\056\041" +
    "\062\042\055\043\063\001\002\000\004\111\211\001\002" +
    "\000\004\013\212\001\002\000\004\112\213\001\002\000" +
    "\004\017\214\001\002\000\004\017\215\001\002\000\004" +
    "\012\216\001\002\000\004\034\217\001\002\000\044\004" +
    "\022\013\034\027\024\044\040\045\023\050\026\051\035" +
    "\055\014\060\042\064\020\065\030\066\036\067\021\071" +
    "\033\072\037\073\032\112\031\001\002\000\004\035\221" +
    "\001\002\000\014\035\uffdb\061\uffdb\070\uffdb\103\uffdb\104" +
    "\uffdb\001\002\000\004\060\223\001\002\000\004\106\224" +
    "\001\002\000\004\011\225\001\002\000\022\027\024\051" +
    "\035\055\014\060\042\064\020\065\030\067\021\073\032" +
    "\001\002\000\004\030\227\001\002\000\004\031\230\001" +
    "\002\000\006\030\ufff2\105\231\001\002\000\004\012\232" +
    "\001\002\000\004\034\233\001\002\000\046\004\022\013" +
    "\034\027\024\035\234\044\040\045\023\050\026\051\035" +
    "\055\014\060\042\064\020\065\030\066\036\067\021\071" +
    "\033\072\037\073\032\112\031\001\002\000\010\035\ufffc" +
    "\103\004\104\005\001\002\000\004\035\236\001\002\000" +
    "\010\035\ufffe\103\004\104\005\001\002\000\004\035\ufffd" +
    "\001\002\000\024\027\024\051\035\055\014\060\042\064" +
    "\020\065\030\067\021\073\032\112\173\001\002\000\004" +
    "\035\uffee\001\002\000\004\011\243\001\002\000\026\012" +
    "\245\027\024\051\035\055\014\060\042\064\020\065\030" +
    "\067\021\073\032\112\173\001\002\000\004\012\256\001" +
    "\002\000\004\034\246\001\002\000\044\004\022\013\034" +
    "\027\024\044\040\045\023\050\026\051\035\055\014\060" +
    "\042\064\020\065\030\066\036\067\021\071\033\072\037" +
    "\073\032\112\031\001\002\000\006\035\250\070\251\001" +
    "\002\000\004\035\uffed\001\002\000\004\112\254\001\002" +
    "\000\004\035\253\001\002\000\004\035\uffec\001\002\000" +
    "\004\013\255\001\002\000\004\035\uffd0\001\002\000\004" +
    "\034\257\001\002\000\044\004\022\013\034\027\024\044" +
    "\040\045\023\050\026\051\035\055\014\060\042\064\020" +
    "\065\030\066\036\067\021\071\033\072\037\073\032\112" +
    "\031\001\002\000\004\070\251\001\002\000\004\035\262" +
    "\001\002\000\004\035\uffeb\001\002\000\004\035\ufffb\001" +
    "\002\000\006\111\054\112\053\001\002\000\004\012\266" +
    "\001\002\000\004\034\267\001\002\000\044\004\022\013" +
    "\034\027\024\044\040\045\023\050\026\051\035\055\014" +
    "\060\042\064\020\065\030\066\036\067\021\071\033\072" +
    "\037\073\032\112\031\001\002\000\004\035\271\001\002" +
    "\000\016\035\uffcd\054\273\061\uffcd\070\uffcd\103\uffcd\104" +
    "\uffcd\001\002\000\014\035\uffde\061\uffde\070\uffde\103\uffde" +
    "\104\uffde\001\002\000\006\034\274\045\275\001\002\000" +
    "\044\004\022\013\034\027\024\044\040\045\023\050\026" +
    "\051\035\055\014\060\042\064\020\065\030\066\036\067" +
    "\021\071\033\072\037\073\032\112\031\001\002\000\004" +
    "\011\276\001\002\000\006\111\054\112\053\001\002\000" +
    "\004\012\300\001\002\000\004\034\301\001\002\000\044" +
    "\004\022\013\034\027\024\044\040\045\023\050\026\051" +
    "\035\055\014\060\042\064\020\065\030\066\036\067\021" +
    "\071\033\072\037\073\032\112\031\001\002\000\004\035" +
    "\303\001\002\000\016\035\uffcd\054\273\061\uffcd\070\uffcd" +
    "\103\uffcd\104\uffcd\001\002\000\014\035\uffce\061\uffce\070" +
    "\uffce\103\uffce\104\uffce\001\002\000\004\035\306\001\002" +
    "\000\014\035\uffcf\061\uffcf\070\uffcf\103\uffcf\104\uffcf\001" +
    "\002\000\004\005\310\001\002\000\004\006\311\001\002" +
    "\000\006\007\314\010\312\001\002\000\004\011\uffd1\001" +
    "\002\000\004\011\315\001\002\000\004\011\uffd2\001\002" +
    "\000\004\037\316\001\002\000\004\012\317\001\002\000" +
    "\004\013\320\001\002\000\044\004\uffd3\013\uffd3\027\uffd3" +
    "\044\uffd3\045\uffd3\050\uffd3\051\uffd3\055\uffd3\060\uffd3\064" +
    "\uffd3\065\uffd3\066\uffd3\067\uffd3\071\uffd3\072\uffd3\073\uffd3" +
    "\112\uffd3\001\002\000\010\021\323\111\325\112\324\001" +
    "\002\000\014\035\uffe8\061\uffe8\070\uffe8\103\uffe8\104\uffe8" +
    "\001\002\000\004\111\335\001\002\000\056\004\022\013" +
    "\034\016\161\017\164\021\156\022\155\027\024\032\157" +
    "\044\040\045\023\050\026\051\035\055\014\060\042\064" +
    "\020\065\030\066\036\067\021\071\033\072\037\073\032" +
    "\112\031\001\002\000\060\004\022\006\330\013\034\016" +
    "\161\017\160\021\156\022\155\027\024\032\157\044\040" +
    "\045\023\050\026\051\035\055\014\060\042\064\020\065" +
    "\030\066\036\067\021\071\033\072\037\073\032\112\031" +
    "\001\002\000\044\004\022\013\034\027\024\044\040\045" +
    "\023\050\026\051\035\055\014\060\042\064\020\065\030" +
    "\066\036\067\021\071\033\072\037\073\032\112\031\001" +
    "\002\000\014\035\uffe2\061\uffe2\070\uffe2\103\uffe2\104\uffe2" +
    "\001\002\000\004\111\332\001\002\000\014\035\uffe7\061" +
    "\uffe7\070\uffe7\103\uffe7\104\uffe7\001\002\000\044\004\022" +
    "\013\034\027\024\044\040\045\023\050\026\051\035\055" +
    "\014\060\042\064\020\065\030\066\036\067\021\071\033" +
    "\072\037\073\032\112\031\001\002\000\014\035\uffe4\061" +
    "\uffe4\070\uffe4\103\uffe4\104\uffe4\001\002\000\014\035\uffe5" +
    "\061\uffe5\070\uffe5\103\uffe5\104\uffe5\001\002\000\046\004" +
    "\022\006\336\013\034\027\024\044\040\045\023\050\026" +
    "\051\035\055\014\060\042\064\020\065\030\066\036\067" +
    "\021\071\033\072\037\073\032\112\031\001\002\000\004" +
    "\111\340\001\002\000\014\035\uffe6\061\uffe6\070\uffe6\103" +
    "\uffe6\104\uffe6\001\002\000\044\004\022\013\034\027\024" +
    "\044\040\045\023\050\026\051\035\055\014\060\042\064" +
    "\020\065\030\066\036\067\021\071\033\072\037\073\032" +
    "\112\031\001\002\000\014\035\uffe3\061\uffe3\070\uffe3\103" +
    "\uffe3\104\uffe3\001\002\000\004\002\000\001\002\000\014" +
    "\035\uffea\061\uffea\070\uffea\103\uffea\104\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\006\002\006\022\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\014\007\015\010\040\013\026\014\016\022\024" +
    "\001\001\000\002\001\001\000\012\005\014\010\342\013" +
    "\026\014\016\001\001\000\002\001\001\000\012\005\014" +
    "\010\321\013\026\014\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\014\010\117\013\026\014" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\042\022\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\014\010\045\013\026\014\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\051\001\001\000\002\001\001\000\004\017\073\001" +
    "\001\000\004\017\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\072" +
    "\001\001\000\004\020\066\001\001\000\004\021\071\001" +
    "\001\000\002\001\001\000\004\021\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\077\001\001\000\004\020\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\014\010\110\013\026\014\016\001\001\000\002\001\001" +
    "\000\004\021\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\014\010\115\013\026\014\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\014\010\130\013\026\014\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\014\010\135\013\026" +
    "\014\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\026\014\171\001\001\000\006\012\151\015" +
    "\144\001\001\000\002\001\001\000\014\005\014\010\165" +
    "\011\164\013\026\014\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\153\001\001\000\012\005\014" +
    "\010\152\013\026\014\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\026\014\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\014\010\217\013\026\014\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\014\010" +
    "\234\013\026\014\016\001\001\000\006\006\262\022\237" +
    "\001\001\000\002\001\001\000\006\006\236\022\237\001" +
    "\001\000\002\001\001\000\010\004\240\013\026\014\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\026\014\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\014\010\246\013\026\014\016\001\001\000" +
    "\004\016\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\014\010\257" +
    "\013\026\014\016\001\001\000\004\016\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\014\010\267\013\026\014\016\001\001\000\002" +
    "\001\001\000\004\023\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\014\010\304\013\026\014\016" +
    "\001\001\000\002\001\001\000\004\021\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\014\010\301" +
    "\013\026\014\016\001\001\000\002\001\001\000\004\023" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\312\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\325\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\014\010\333\011" +
    "\164\013\026\014\016\001\001\000\014\005\014\010\330" +
    "\011\153\013\026\014\016\001\001\000\012\005\014\010" +
    "\326\013\026\014\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\014\010\332\013" +
    "\026\014\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\014\010\336\013\026\014\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\014\010\340" +
    "\013\026\014\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<String> resultados = new ArrayList<>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= privacidad CLASE IDENTIFICADOR LLAVE_ABRE main LLAVE_CIERRA 
            {
              Object RESULT =null;
		int clase_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int clase_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object clase_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nom_clase_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nom_clase_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nom_clase_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llave_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llave_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llave_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llave_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llave_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llave_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =   clase_val.toString() ; RESULT2 = nom_clase_val.toString() ; resultados.add(RESULT); resultados.add(RESULT2); RESULT3 = llave_abre_val.toString(); resultados.add(RESULT3); RESULT4 = llave_cierra_val.toString(); resultados.add(RESULT4);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= privacidad CLASE IDENTIFICADOR LLAVE_ABRE funcionalidad main LLAVE_CIERRA 
            {
              Object RESULT =null;
		int clase_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int clase_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object clase_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nom_clase_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nom_clase_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nom_clase_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int llave_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int llave_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object llave_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llave_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llave_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llave_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =   nom_clase_val.toString() ; resultados.add(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main ::= privacidad STATIC VACIO MAIN PARENTESIS_ABRE declarar CORCHETE_ABRE CORCHETE_CIERRA ARGS PARENTESIS_CIERRA LLAVE_ABRE funcionalidad LLAVE_CIERRA 
            {
              Object RESULT =null;
		int static_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int static_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object static_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vacio_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int vacio_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object vacio_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int main_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int main_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object main_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int parentesis_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int parentesis_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object parentesis_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int parentesis_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parentesis_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parentesis_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llave_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llave_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llave_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llave_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llave_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llave_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = static_val.toString(); resultados.add(RESULT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main ::= privacidad STATIC VACIO MAIN PARENTESIS_ABRE declarar CORCHETE_ABRE CORCHETE_CIERRA ARGS PARENTESIS_CIERRA LLAVE_ABRE funcionalidad LLAVE_CIERRA metodo 
            {
              Object RESULT =null;
		int static_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int static_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object static_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int vacio_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int vacio_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object vacio_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int main_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int main_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object main_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int parentesis_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int parentesis_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object parentesis_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int parentesis_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parentesis_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object parentesis_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int llave_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int llave_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object llave_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llave_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llave_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object llave_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = main_val.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main ::= privacidad STATIC VACIO MAIN PARENTESIS_ABRE declarar CORCHETE_ABRE CORCHETE_CIERRA ARGS PARENTESIS_CIERRA LLAVE_ABRE LLAVE_CIERRA 
            {
              Object RESULT =null;
		int static_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int static_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object static_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vacio_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int vacio_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object vacio_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int main_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int main_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object main_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int parentesis_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int parentesis_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object parentesis_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int parentesis_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parentesis_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object parentesis_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llave_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llave_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object llave_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llave_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llave_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llave_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = main_val.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main ::= privacidad STATIC VACIO MAIN PARENTESIS_ABRE declarar CORCHETE_ABRE CORCHETE_CIERRA ARGS PARENTESIS_CIERRA LLAVE_ABRE LLAVE_CIERRA metodo 
            {
              Object RESULT =null;
		int static_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int static_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object static_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vacio_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int vacio_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object vacio_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int main_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int main_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object main_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int parentesis_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int parentesis_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object parentesis_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int parentesis_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parentesis_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parentesis_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llave_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llave_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llave_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llave_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llave_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object llave_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = main_val.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarar ::= TEXTO 
            {
              Object RESULT =null;
		int tipo_dato_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipo_dato_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo_dato_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("str : " + tipo_dato_val.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declarar ::= INTEGER 
            {
              Object RESULT =null;
		int tipo_dato_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipo_dato_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo_dato_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("int : " + tipo_dato_val.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declarar ::= LONG 
            {
              Object RESULT =null;
		int tipo_dato_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipo_dato_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo_dato_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("int : " + tipo_dato_val.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declarar ::= FLOAT 
            {
              Object RESULT =null;
		int tipo_dato_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipo_dato_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo_dato_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("float : " + tipo_dato_val.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declarar ::= DOBLE 
            {
              Object RESULT =null;
		int tipo_dato_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipo_dato_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo_dato_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("float : " + tipo_dato_val.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarar ::= SHORT 
            {
              Object RESULT =null;
		int tipo_dato_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipo_dato_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo_dato_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("float : " + tipo_dato_val.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarar ::= BOOL 
            {
              Object RESULT =null;
		int tipo_dato_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipo_dato_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo_dato_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("bool : " + tipo_dato_val.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declarar ::= VACIO 
            {
              Object RESULT =null;
		int tipo_dato_evalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipo_dato_evalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo_dato_eval = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declarar ::= declarar CORCHETE_ABRE CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int tipo_dato_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipo_dato_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo_dato_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("list : " + tipo_dato_val.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros ::= declarar IDENTIFICADOR 
            {
              Object RESULT =null;
		int identificador_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificador_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identificador_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametros ::= declarar IDENTIFICADOR COMA parametros 
            {
              Object RESULT =null;
		int identificador_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identificador_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identificador_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametros ::= IDENTIFICADOR COMA parametros 
            {
              Object RESULT =null;
		int identificador_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identificador_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identificador_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // metodo ::= privacidad tipo_metodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_metodo ::= parametros PARENTESIS_ABRE PARENTESIS_CIERRA LLAVE_ABRE funcionalidad LLAVE_CIERRA 
            {
              Object RESULT =null;
		int parentesis_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parentesis_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object parentesis_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parentesis_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parentesis_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parentesis_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llave_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llave_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llave_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llave_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llave_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llave_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_metodo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_metodo ::= parametros PARENTESIS_ABRE PARENTESIS_CIERRA LLAVE_ABRE funcionalidad retorno_metodo LLAVE_CIERRA 
            {
              Object RESULT =null;
		int parentesis_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parentesis_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object parentesis_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parentesis_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parentesis_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object parentesis_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int llave_abre_vallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int llave_abre_vallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object llave_abre_vall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llave_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llave_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llave_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_metodo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_metodo ::= parametros PARENTESIS_ABRE parametros PARENTESIS_CIERRA LLAVE_ABRE funcionalidad retorno_metodo LLAVE_CIERRA 
            {
              Object RESULT =null;
		int parentesis_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int parentesis_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object parentesis_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parentesis_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parentesis_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object parentesis_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int llave_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int llave_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object llave_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llave_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llave_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llave_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_metodo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funcionalidad ::= imprimir funcionalidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funcionalidad ::= SCAN IDENTIFICADOR ASIGNAR NUEVO SCAN PARENTESIS_ABRE PARENTESIS_CIERRA funcionalidad 
            {
              Object RESULT =null;
		int identificador_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int identificador_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String identificador_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parentesis_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parentesis_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object parentesis_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parentesis_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parentesis_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object parentesis_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcionalidad ::= parametros funcionalidad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcionalidad ::= parametros ASIGNAR DIGITO funcionalidad 
            {
              Object RESULT =null;
		int asignar_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asignar_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object asignar_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int digito_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int digito_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer digito_val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("= : " + asignar_val.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcionalidad ::= parametros ASIGNAR RESTA DIGITO funcionalidad 
            {
              Object RESULT =null;
		int asignar_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int asignar_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object asignar_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int resta_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int resta_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object resta_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int digito_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int digito_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer digito_val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("= : " + asignar_val.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcionalidad ::= parametros ASIGNAR IDENTIFICADOR funcionalidad 
            {
              Object RESULT =null;
		int asignar_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asignar_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object asignar_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identificador_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificador_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String identificador_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("= : " + asignar_val.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcionalidad ::= parametros ASIGNAR DIGITO PUNTO DIGITO funcionalidad 
            {
              Object RESULT =null;
		int asignar_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int asignar_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object asignar_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int digito_val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int digito_val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer digito_val1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int digito_val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int digito_val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer digito_val2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcionalidad ::= parametros ASIGNAR RESTA DIGITO PUNTO DIGITO funcionalidad 
            {
              Object RESULT =null;
		int asignar_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int asignar_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object asignar_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int resta_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resta_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object resta_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int digito_val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int digito_val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer digito_val1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int digito_val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int digito_val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer digito_val2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("= : " + asignar_val.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcionalidad ::= parametros ASIGNAR aritmetica funcionalidad 
            {
              Object RESULT =null;
		int asignar_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asignar_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object asignar_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcionalidad ::= IDENTIFICADOR ASIGNAR IDENTIFICADOR funcionalidad 
            {
              Object RESULT =null;
		int identificador_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificador_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String identificador_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asignar_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asignar_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object asignar_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcionalidad ::= IDENTIFICADOR ASIGNAR aritmetica funcionalidad 
            {
              Object RESULT =null;
		int identificador_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificador_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String identificador_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asignar_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asignar_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object asignar_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcionalidad ::= IDENTIFICADOR ASIGNAR estado_bool PUNTO_COMA 
            {
              Object RESULT =null;
		int identificador_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificador_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String identificador_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asignar_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asignar_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object asignar_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcionalidad ::= SI PARENTESIS_ABRE comparacion PARENTESIS_CIERRA LLAVE_ABRE funcionalidad LLAVE_CIERRA if_anidado 
            {
              Object RESULT =null;
		int if_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int if_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object if_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int parentesis_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int parentesis_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object parentesis_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parentesis_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parentesis_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object parentesis_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int llave_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int llave_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object llave_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llave_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llave_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object llave_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcionalidad ::= MIENTRAS PARENTESIS_ABRE comparacion PARENTESIS_CIERRA LLAVE_ABRE funcionalidad LLAVE_CIERRA 
            {
              Object RESULT =null;
		int while_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int while_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object while_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parentesis_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parentesis_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object parentesis_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parentesis_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parentesis_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parentesis_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llave_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llave_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llave_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llave_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llave_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llave_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funcionalidad ::= HACER LLAVE_ABRE funcionalidad LLAVE_CIERRA MIENTRAS PARENTESIS_ABRE comparacion PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;
		int do_valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int do_valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object do_valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int llave_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int llave_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object llave_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int llave_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int llave_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object llave_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int while_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int while_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object while_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parentesis_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parentesis_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parentesis_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int parentesis_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parentesis_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object parentesis_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcionalidad ::= REPETIR PARENTESIS_ABRE INTEGER IDENTIFICADOR ASIGNAR DIGITO PUNTO_COMA IDENTIFICADOR operador_comparacion DIGITO PUNTO_COMA IDENTIFICADOR SUMA SUMA PARENTESIS_CIERRA LLAVE_ABRE funcionalidad LLAVE_CIERRA 
            {
              Object RESULT =null;
		int for_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int for_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		Object for_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int parentesis_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int parentesis_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		Object parentesis_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int identificador_val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int identificador_val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		String identificador_val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int punto_coma1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int punto_coma1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object punto_coma1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int identificador_val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int identificador_val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String identificador_val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int punto_coma2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int punto_coma2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object punto_coma2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int parentesis_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parentesis_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parentesis_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llave_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llave_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llave_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llave_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llave_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llave_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funcionalidad ::= CAMBIO PARENTESIS_ABRE IDENTIFICADOR PARENTESIS_CIERRA LLAVE_ABRE switch_case LLAVE_CIERRA 
            {
              Object RESULT =null;
		int parentesis_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parentesis_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object parentesis_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parentesis_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parentesis_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parentesis_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llave_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llave_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llave_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llave_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llave_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llave_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcionalidad ::= PUNTO_COMA funcionalidad 
            {
              Object RESULT =null;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcionalidad ::= PUNTO_COMA 
            {
              Object RESULT =null;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionalidad",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // aritmetica ::= DIGITO operador DIGITO 
            {
              Object RESULT =null;
		int digito_val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int digito_val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer digito_val1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int digito_val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int digito_val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer digito_val2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmetica",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // aritmetica ::= DIGITO SUMA DIGITO 
            {
              Object RESULT =null;
		int digito_val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int digito_val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer digito_val1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sumaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object suma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int digito_val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int digito_val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer digito_val2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmetica",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // aritmetica ::= IDENTIFICADOR SUMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int identificador_val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identificador_val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identificador_val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sumaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object suma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identificador_val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificador_val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identificador_val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmetica",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // aritmetica ::= IDENTIFICADOR operador IDENTIFICADOR 
            {
              Object RESULT =null;
		int identificador_val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identificador_val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identificador_val1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identificador_val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificador_val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identificador_val2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("aritmetica",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // imprimir ::= SYSTEM PUNTO SALIDA PUNTO tipo_imprimir PARENTESIS_ABRE COMILLAS_DOBLES PARENTESIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;
		int sys_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int sys_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object sys_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int parentesis_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parentesis_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object parentesis_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int parentesis_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parentesis_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object parentesis_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Resultado : " + sys_val.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imprimir",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo_imprimir ::= IMPRIMIR 
            {
              Object RESULT =null;
		int imprimir_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int imprimir_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object imprimir_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = imprimir_val.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_imprimir",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo_imprimir ::= IMPRIMIR_LINEA 
            {
              Object RESULT =null;
		int imprimir_linea_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int imprimir_linea_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object imprimir_linea_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = imprimir_linea_val.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_imprimir",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // retorno_metodo ::= RETORNAR IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		int retornar_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retornar_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object retornar_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identificador_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificador_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String identificador_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retorno_metodo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_anidado ::= ADEMAS LLAVE_ABRE funcionalidad LLAVE_CIERRA 
            {
              Object RESULT =null;
		int llave_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llave_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object llave_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llave_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llave_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llave_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_anidado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if_anidado ::= ADEMAS SI PARENTESIS_ABRE comparacion PARENTESIS_CIERRA LLAVE_ABRE funcionalidad LLAVE_CIERRA if_anidado 
            {
              Object RESULT =null;
		int parentesis_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int parentesis_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object parentesis_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parentesis_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parentesis_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object parentesis_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int llave_abre_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int llave_abre_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object llave_abre_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llave_cierra_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llave_cierra_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object llave_cierra_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_anidado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // if_anidado ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_anidado",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // switch_case ::= CASO DIGITO DOS_PUNTOS funcionalidad ROMPER PUNTO_COMA switch_case 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_case",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // switch_case ::= POR_DEFECTO DOS_PUNTOS funcionalidad ROMPER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_case",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // switch_case ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_case",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // comparacion ::= IDENTIFICADOR operador_comparacion IDENTIFICADOR operador_logico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // comparacion ::= IDENTIFICADOR operador_comparacion DIGITO operador_logico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // comparacion ::= DIGITO operador_comparacion DIGITO operador_logico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // comparacion ::= DIGITO operador_comparacion IDENTIFICADOR operador_logico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operador_comparacion ::= MAYOR 
            {
              Object RESULT =null;
		int operador_comparacion_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operador_comparacion_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operador_comparacion_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador_comparacion ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int operador_comparacion_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operador_comparacion_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operador_comparacion_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador_comparacion ::= MENOR 
            {
              Object RESULT =null;
		int operador_comparacion_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operador_comparacion_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operador_comparacion_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador_comparacion ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int operador_comparacion_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operador_comparacion_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operador_comparacion_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operador_comparacion ::= DIFERENTE 
            {
              Object RESULT =null;
		int operador_comparacion_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operador_comparacion_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operador_comparacion_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operador_comparacion ::= IGUAL 
            {
              Object RESULT =null;
		int operador_comparacion_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operador_comparacion_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operador_comparacion_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operador_logico ::= AND comparacion 
            {
              Object RESULT =null;
		int operador_logico_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operador_logico_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object operador_logico_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operador_logico ::= OR comparacion 
            {
              Object RESULT =null;
		int operador_logico_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operador_logico_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object operador_logico_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operador_logico ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // estado_bool ::= VERDAD 
            {
              Object RESULT =null;
		int estado_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int estado_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object estado_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_bool",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // estado_bool ::= FALSO 
            {
              Object RESULT =null;
		int estado_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int estado_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object estado_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estado_bool",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operador ::= RESTA 
            {
              Object RESULT =null;
		int operador_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operador_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operador_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operador ::= MULTI 
            {
              Object RESULT =null;
		int operador_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operador_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operador_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador ::= DIVIDIR 
            {
              Object RESULT =null;
		int operador_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operador_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operador_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador ::= POTENCIA 
            {
              Object RESULT =null;
		int operador_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operador_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operador_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // privacidad ::= PUBLICO 
            {
              Object RESULT =null;
		int privacidad_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int privacidad_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object privacidad_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("privacidad",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // privacidad ::= PRIVADO 
            {
              Object RESULT =null;
		int privacidad_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int privacidad_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object privacidad_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("privacidad",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
