package umg.compiladores;

import java_cup.runtime.*;

import java.util.ArrayList;


parser code {:
    public ArrayList<String> resultados = new ArrayList<>();
:};

terminal SYSTEM, SALIDA, PUNTO, IMPRIMIR, IMPRIMIR_LINEA, PARENTESIS_ABRE, PARENTESIS_CIERRA, PUNTO_COMA, NOT, COMILLA_SIMPLE_CIERRA;
terminal MULTI, SUMA, COMA, RESTA, DIVIDIR, DOS_PUNTOS, MENOR, ASIGNAR, MAYOR, TEXTO, CORCHETE_ABRE, CORCHETE_CIERRA;
terminal POTENCIA, GUION_BAJO, LLAVE_ABRE, LLAVE_CIERRA, DIFERENTE, COMILLAS_DOBLES, AND, MENOR_IGUAL, IGUAL, MAYOR_IGUAL, HACER, SI;
terminal IN, OR, REPETIR, INTEGER, NUEVO, CASO, ADEMAS, LONG, SIGUIENTE, VERDAD, VACIO, ROMPER, CLASE, FALSO, FLOAT, SHORT, MIENTRAS;
terminal DOBLE, RETORNAR, CAMBIO, SCAN, BOOL, SIGUIENTE_INT, SIGUIENTE_LINEA, SIGUIENTE_LONG, SIGUIENTE_FLOAT, SIGUIENTE_SHORT;
terminal SIGUIENTE_DOBLE, SIGUIENTE_BOOL, PRIVADO, PUBLICO, ARGS, MAIN, STATIC, POR_DEFECTO;
terminal Integer DIGITO;
terminal String IDENTIFICADOR;

non terminal inicio, tipo_imprimir, tipo_metodo, imprimir, metodo, main, funcionalidad, operador, aritmetica, declarar, parametros, estado_bool, retorno_metodo, operador_comparacion, operador_logico, comparacion, privacidad, if_anidado, switch_case;

start with inicio;

inicio                  ::= privacidad CLASE:clase_val IDENTIFICADOR:nom_clase_val LLAVE_ABRE:llave_abre_val main LLAVE_CIERRA:llave_cierra_val                                            {: RESULT =  "class" ; RESULT2 = nom_clase_val.toString() ; resultados.add(RESULT); resultados.add(RESULT2); RESULT3 = ":"; resultados.add(RESULT3); RESULT4 = llave_cierra_val.toString(); resultados.add(RESULT4);:}
                        |   privacidad CLASE:clase_val IDENTIFICADOR:nom_clase_val LLAVE_ABRE:llave_abre_val funcionalidad main LLAVE_CIERRA:llave_cierra_val                              {: RESULT =  "class" ; RESULT2 = nom_clase_val.toString() ; resultados.add(RESULT); resultados.add(RESULT2); RESULT3 = ":"; resultados.add(RESULT3); RESULT4 = llave_cierra_val.toString(); resultados.add(RESULT4);:};

main                    ::= privacidad STATIC:static_val VACIO:vacio_val MAIN:main_val PARENTESIS_ABRE:parentesis_abre_val declarar CORCHETE_ABRE CORCHETE_CIERRA ARGS PARENTESIS_CIERRA:parentesis_cierra_val LLAVE_ABRE:llave_abre_val funcionalidad LLAVE_CIERRA:llave_cierra_val             {: RESULT = "def main"; resultados.add(RESULT); RESULT2 = ":"; resultados.add(RESULT2);:}
                        |   privacidad STATIC:static_val VACIO:vacio_val MAIN:main_val PARENTESIS_ABRE:parentesis_abre_val declarar CORCHETE_ABRE CORCHETE_CIERRA ARGS PARENTESIS_CIERRA:parentesis_cierra_val LLAVE_ABRE:llave_abre_val funcionalidad LLAVE_CIERRA:llave_cierra_val metodo      {: RESULT = "def main"; resultados.add(RESULT); RESULT2 = ":"; resultados.add(RESULT2);:}
                        |   privacidad STATIC:static_val VACIO:vacio_val MAIN:main_val PARENTESIS_ABRE:parentesis_abre_val declarar CORCHETE_ABRE CORCHETE_CIERRA ARGS PARENTESIS_CIERRA:parentesis_cierra_val LLAVE_ABRE:llave_abre_val /* ε */ LLAVE_CIERRA:llave_cierra_val                   {: RESULT = "def main"; resultados.add(RESULT); RESULT2 = ":"; resultados.add(RESULT2);:}
                        |   privacidad STATIC:static_val VACIO:vacio_val MAIN:main_val PARENTESIS_ABRE:parentesis_abre_val declarar CORCHETE_ABRE CORCHETE_CIERRA ARGS PARENTESIS_CIERRA:parentesis_cierra_val LLAVE_ABRE:llave_abre_val /* ε */ LLAVE_CIERRA:llave_cierra_val metodo            {: RESULT = "def main"; resultados.add(RESULT); RESULT2 = ":"; resultados.add(RESULT2);:};

declarar                ::= TEXTO:tipo_dato_val                                         {: RESULT = "str()"; resultados.add(RESULT); :}
                        |   INTEGER:tipo_dato_val                                       {: RESULT = "int()"; resultados.add(RESULT); :}
                        |   LONG:tipo_dato_val                                          {: RESULT = "int()"; resultados.add(RESULT); :}
                        |   FLOAT:tipo_dato_val                                         {: RESULT = "float()"; resultados.add(RESULT); :}
                        |   DOBLE:tipo_dato_val                                         {: RESULT = "float()"; resultados.add(RESULT); :}
                        |   SHORT:tipo_dato_val                                         {: RESULT = "int()"; resultados.add(RESULT); :}
                        |   BOOL:tipo_dato_val                                          {: RESULT = "bool()"; resultados.add(RESULT); :}
                        |   VACIO:tipo_dato_eval
                        |   declarar CORCHETE_ABRE CORCHETE_CIERRA:tipo_dato_val        {: RESULT = "str()"; resultados.add(RESULT); :};

parametros              ::= declarar IDENTIFICADOR:identificador_val
                        |   declarar IDENTIFICADOR:identificador_val COMA parametros
                        |   IDENTIFICADOR:identificador_val COMA parametros;

metodo                  ::= privacidad tipo_metodo;

tipo_metodo             ::= parametros PARENTESIS_ABRE:parentesis_abre_val PARENTESIS_CIERRA:parentesis_val LLAVE_ABRE:llave_abre_val funcionalidad LLAVE_CIERRA:llave_cierra_val
                        |   parametros PARENTESIS_ABRE:parentesis_abre_val PARENTESIS_CIERRA:parentesis_val LLAVE_ABRE:llave_abre_vall funcionalidad retorno_metodo LLAVE_CIERRA:llave_cierra_val
                        |   parametros PARENTESIS_ABRE:parentesis_abre_val parametros PARENTESIS_CIERRA:parentesis_cierra_val LLAVE_ABRE:llave_abre_val funcionalidad retorno_metodo LLAVE_CIERRA:llave_cierra_val;

funcionalidad           ::= imprimir funcionalidad
                        |   SCAN IDENTIFICADOR:identificador_val ASIGNAR NUEVO SCAN PARENTESIS_ABRE:parentesis_abre_val PARENTESIS_CIERRA:parentesis_cierra_val funcionalidad
                        |   parametros funcionalidad
                        |   parametros ASIGNAR:asignar_val DIGITO:digito_val funcionalidad                                                            {: System.out.println("= : " + asignar_val.toString()); :}
                        |   parametros ASIGNAR:asignar_val RESTA:resta_val DIGITO:digito_val funcionalidad                                                                 {: System.out.println("= : " + asignar_val.toString()); :}
                        |   parametros ASIGNAR:asignar_val IDENTIFICADOR:identificador_val funcionalidad                                                        {: System.out.println("= : " + asignar_val.toString()); :}
                        |   parametros ASIGNAR:asignar_val DIGITO:digito_val1 PUNTO DIGITO:digito_val2 funcionalidad
                        |   parametros ASIGNAR:asignar_val RESTA:resta_val DIGITO:digito_val1 PUNTO DIGITO:digito_val2 funcionalidad                                                  {: System.out.println("= : " + asignar_val.toString()); :}
                        |   parametros ASIGNAR:asignar_val aritmetica funcionalidad
                        |   IDENTIFICADOR:identificador_val ASIGNAR:asignar_val IDENTIFICADOR funcionalidad
                        |   IDENTIFICADOR:identificador_val ASIGNAR:asignar_val aritmetica funcionalidad
                        |   IDENTIFICADOR:identificador_val ASIGNAR:asignar_val estado_bool PUNTO_COMA:punto_coma
                        |   SI:if_val PARENTESIS_ABRE:parentesis_abre_val comparacion PARENTESIS_CIERRA:parentesis_cierra_val LLAVE_ABRE:llave_val funcionalidad LLAVE_CIERRA:llave_cierra_val if_anidado
                        |   MIENTRAS:while_val PARENTESIS_ABRE:parentesis_abre_val comparacion PARENTESIS_CIERRA:parentesis_cierra_val LLAVE_ABRE:llave_abre_val funcionalidad LLAVE_CIERRA:llave_cierra_val
                        |   HACER:do_valor LLAVE_ABRE:llave_abre_val funcionalidad LLAVE_CIERRA:llave_val MIENTRAS:while_val PARENTESIS_ABRE:parentesis_abre_val comparacion PARENTESIS_CIERRA:parentesis_cierra_val PUNTO_COMA:punto_coma
                        |   REPETIR:for_val PARENTESIS_ABRE:parentesis_abre_val INTEGER IDENTIFICADOR:identificador_val1 ASIGNAR DIGITO PUNTO_COMA:punto_coma1 IDENTIFICADOR:identificador_val2 operador_comparacion DIGITO PUNTO_COMA:punto_coma2 IDENTIFICADOR SUMA SUMA PARENTESIS_CIERRA:parentesis_val
                            LLAVE_ABRE:llave_abre_val funcionalidad LLAVE_CIERRA:llave_val
                        |   CAMBIO PARENTESIS_ABRE:parentesis_abre_val IDENTIFICADOR PARENTESIS_CIERRA:parentesis_cierra_val LLAVE_ABRE:llave_abre_val switch_case LLAVE_CIERRA:llave_cierra_val
                        |   PUNTO_COMA:punto_coma funcionalidad
                        |   PUNTO_COMA:punto_coma;

aritmetica              ::= DIGITO:digito_val1 operador DIGITO:digito_val2
                        |   DIGITO:digito_val1 SUMA:suma DIGITO:digito_val2
                        |   IDENTIFICADOR:identificador_val1 SUMA:suma IDENTIFICADOR:identificador_val2
                        |   IDENTIFICADOR:identificador_val1 operador IDENTIFICADOR:identificador_val2;

imprimir                ::= SYSTEM:sys_val PUNTO SALIDA PUNTO tipo_imprimir PARENTESIS_ABRE:parentesis_val COMILLAS_DOBLES PARENTESIS_CIERRA:parentesis_cierra_val PUNTO_COMA:punto_coma                                                         {: System.out.println("Resultado : " + sys_val.toString()); :};

tipo_imprimir           ::= IMPRIMIR:imprimir_val                                                                                                                                           {: RESULT = imprimir_val.toString(); :}
                        |   IMPRIMIR_LINEA:imprimir_linea_val                                                                                                                               {: RESULT = imprimir_linea_val.toString(); :};

retorno_metodo          ::= RETORNAR:retornar_val IDENTIFICADOR:identificador_val PUNTO_COMA;

if_anidado              ::= ADEMAS LLAVE_ABRE:llave_abre_val funcionalidad LLAVE_CIERRA:llave_val
                        |   ADEMAS SI PARENTESIS_ABRE:parentesis_abre_val comparacion PARENTESIS_CIERRA:parentesis_cierra_val LLAVE_ABRE:llave_abre_val funcionalidad LLAVE_CIERRA:llave_cierra_val if_anidado
                        |   /* ε */;

switch_case             ::= CASO DIGITO DOS_PUNTOS funcionalidad ROMPER PUNTO_COMA switch_case
                        |   POR_DEFECTO DOS_PUNTOS funcionalidad ROMPER PUNTO_COMA
                        |   /* ε */;

comparacion             ::= IDENTIFICADOR operador_comparacion IDENTIFICADOR operador_logico
                        |   IDENTIFICADOR operador_comparacion DIGITO operador_logico
                        |   DIGITO operador_comparacion DIGITO operador_logico
                        |   DIGITO operador_comparacion IDENTIFICADOR operador_logico;

operador_comparacion    ::= MAYOR:operador_comparacion_val
                        |   MAYOR_IGUAL:operador_comparacion_val
                        |   MENOR:operador_comparacion_val
                        |   MENOR_IGUAL:operador_comparacion_val
                        |   DIFERENTE:operador_comparacion_val
                        |   IGUAL:operador_comparacion_val;

operador_logico         ::= AND:operador_logico_val comparacion
                        |   OR:operador_logico_val comparacion
                        |   /* ε */;

estado_bool             ::= VERDAD:estado_val
                        |   FALSO:estado_val;

operador                ::= RESTA:operador_val
                        |   MULTI:operador_val
                        |   DIVIDIR:operador_val
                        |   POTENCIA:operador_val;

privacidad              ::= PUBLICO:privacidad_val
                        |   PRIVADO:privacidad_val;




